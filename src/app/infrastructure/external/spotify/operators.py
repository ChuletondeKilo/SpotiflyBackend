from src.app.domain.models import (CreatePlaylistRequest, artistsSongsCollection)
from random import sample
from spotipy import Spotify
from .schema import ArtistSchema, SongTrackSchema, SongCollectionSchema

class BaseSpotifyOperator:

    __slots__ = ('_client')

    def __init__(self, client: Spotify):
        
        self._client: Spotify = client

class ArtistsOperator(BaseSpotifyOperator):

    __slots__ = ('_client', 'artist')

    def __init__(self, client: Spotify, artist_name: str):

        super().__init__(client)
        artist_data: dict = self._client.search(q=f'artist:{artist_name}', type='artist', limit=1)['artists']['items'][0]
        self.artist: ArtistSchema = ArtistSchema(**artist_data)

    def getSongs(self):

        songs_data = self._client.artist_top_tracks(self.artist.id)['tracks']
        songs_list: list[SongTrackSchema] = [SongTrackSchema(**song) for song in songs_data]
        songs: SongCollectionSchema = SongCollectionSchema(items = songs_list)

        return songs

class PlaylistOperator(BaseSpotifyOperator):

    __slots__ = ('_client', 'playlist_name')

    def __init__(self, client: Spotify, playlist_name: str):

        super().__init__(client)
        self.playlist_name:str = playlist_name
    
    def create(self, playlist_name: str, songs_ids: list[int]) -> None:

        create_playlist = self._client.user_playlist_create(self._client.current_user()['id'], playlist_name, public=True, collaborative=False, description='Playlist generated by Bifly')
        self._client.user_playlist_add_tracks(self._client.current_user()['id'], create_playlist['id'], songs_ids, position=None)

